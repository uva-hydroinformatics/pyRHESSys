#!$pythonPath
import os
import pyrhessys as pr
import pyrhessys.evaluation as pre
import shutil
import xarray as xr
import json
import pkg_resources
$importStrings

if __name__ == '__main__':
    # Template variables
    rhessys_exe = '$rhessysExe'
    path = '$path'
    obs_data_file = '$obsDataFile'
    sim_calib_var = '$simVarName'
    obs_calib_var = '$obsVarName'
    out_file = '$outFile'
    metrics_log = '$metricsLog'
    param_mapping_file = '$paramMappingFile'
    param_weight_file = '$paramWeightFile'
    param_file = '$paramFile'
    allow_failures = $allowFailures
    simulation_args = $simulationArgs
    conversion = $conversionFunc
    filter = $filterFunc

    r = pr.Simulation(rhessys_exe, path)

    # read in parameters from ostrich files and summa setup
    #with xr.open_dataset(param_file) as temp:
    #    trial_params = temp.load()

    PARAMETER = pkg_resources.resource_filename(
            __name__, 'meta/parameter_meta.json')
    with open(PARAMETER, 'r') as f:
        PARAMETER_META = json.load(f)

    param_dict = {}
    with open(param_weight_file) as weights:
        for line in weights:
            name, value = line.split('|')
            param_dict[name.strip()] = float(value.strip())

    # insert calibration parameters from ostrich
    for k, v in param_dict.items():
        r.parameters[k] = v
        #     trial_params[k] = xr.full_like(trial_params['hruIndex'], fill_value=v)
        # trial_params.to_netcdf(param_file)

    # initialize simulation object
    #s = pr.Simulation(rhessys_exe, path, **simulation_args)
    if os.path.exists(out_file):
        os.remove(out_file)
    # run the simulation
    r.run('local')
    if r.status != 'Success':
        print(r.stdout)
        print('--------------------------------------------')
        print(r.stderr)
        if allow_failures:
            kge = -3
            nse = -3
            mae = 9999.0
            mse = 999999.0
            rmse = 9999.0
            with open(out_file, 'w+') as f:
                f.write('%.6f'%kge  + '\t #KGE\n')
                f.write('%.6f'%mae  + '\t #MAE\n')
                f.write('%.6f'%mse  + '\t #MSE\n')
                f.write('%.6f'%rmse + '\t #RMSE\n')
                f.write('%.6f'%nse  + '\t #NSE\n')

            with open(metrics_log, 'a') as f:
                f.write('%.6f'%kge  + ', %.6f'%mae
                        + ', %.6f'%mse + ', %.6f'%rmse
                        + ', %.6f'%nse + '\n')

    assert r.status == 'Success'

    # open output and calculate diagnostics
    from datetime import datetime
    sim_ds_raw = pd.read_csv(r.output + "/rhessys_run" +'_basin.daily', delimiter=" ")
    Date = []
    for i in range(len(sim_ds_raw)):
        Date.append(datetime(sim_ds_raw['year'][i], sim_ds_raw['month'][i], sim_ds_raw['day'][i]))
    sim_ds_raw['Date'] = Date
    sim_ds = sim_ds_raw.set_index('Date')
    
    obs_ds_raw = pd.read_csv(obs_data_file)
    obs_ds = obs_ds_raw.set_index('date')


    # trim sim and obs to common time length
    start, stop = pre.trim_time(sim_ds, obs_ds)
    sim_ds = sim_ds[start:stop]
    obs_ds = obs_ds[start:stop]
    #sim_filt, obs_filt = filter(sim_ds,  obs_ds)

    kge = pre.kling_gupta_efficiency(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    mae = pre.mean_absolute_error(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    mse = pre.mean_squared_error(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    rmse = pre.root_mean_square_error(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))
    nse  = pre.nash_sutcliffe_efficiency(filter(sim_ds[sim_calib_var]),  filter(conversion(obs_ds[obs_calib_var])))

    # save diagnostics in form that ostrich can read
    with open(out_file, 'w+') as f:
        f.write('%.6f'%kge  + '\t #KGE\n')
        f.write('%.6f'%mae  + '\t #MAE\n')
        f.write('%.6f'%mse  + '\t #MSE\n')
        f.write('%.6f'%rmse + '\t #RMSE\n')
        f.write('%.6f'%nse  + '\t #NSE\n')

    with open(metrics_log, 'a') as f:
        f.write('%.6f'%kge  + ', %.6f'%mae + ', %.6f'%mse + ', %.6f'%rmse + ', %.6f'%nse + '\n')